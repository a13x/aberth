{"name":"Aberth","tagline":"Generic BERT-RPC server in Erlang","body":"# aberth - generic BERT-RPC server written in Erlang\r\n\r\nCopyright (c) 2014 Aleksandar Radulovic.\r\n\r\n__Version:__ 0.9\r\n\r\n[![Build Status](https://travis-ci.org/a13x/aberth.png?branch=master)](https://travis-ci.org/a13x/aberth)\r\n\r\naberth is a **generic BERT-RPC server** in Erlang. It exposes regular erlang modules and it uses\r\n[barrel](https://github.com/benoitc/barrel) as TCP acceptor pool\r\nwhich provides low-latency when accepting connections.\r\n\r\nThe inspiration for the name came from [Abarth](http://en.wikipedia.org/wiki/Abarth) and [BERT](http://bert-rpc.org/).\r\n\r\n## Supported BERT-RPC features\r\n\r\nAberth supports call, cast and info BERPs. It is up to you, however, to make use of info packets. Aberth routes call and cast requests to your modules and takes care of encoding and decoding.\r\n\r\n### TODO\r\n\r\nThere's still a bit of thinking left on how to pass the info BERPs to the handler modules in a neat way.\r\nTherefore, at the moment, those are not passed through - if you have an idea on how to elegantly solve this,\r\nfeel free to send a pull request!\r\n\r\n## Usage\r\n\r\n> Note: You will need [rebar](https://github.com/rebar/rebar) to compile.\r\n\r\nCheck the example app - it demonstrates including aberth in your OTP app, with clients in Python and Ruby.\r\n\r\n### Create a simple module (or two)\r\n\r\n```\r\n-module(some_module).\r\n\r\n-export([some_method/3]).\r\n\r\nsome_method(One, Two, Three) ->\r\n\tdict:from_list([{one, One}, {two, Two}, {three, Three}]).\r\n```\r\n\r\n```\r\n-module(some_adder).\r\n\r\n-export([add/2]).\r\n\r\nadd(One, Two) ->\r\n\tOne + Two.\r\n```\r\n\r\n### Start aberth server\r\n\r\n```\r\nNumberOfAcceptors = 100,\r\nPort = 10001,\r\nHandlers = [some_module, some_adder],\r\naberth:start_server(NumberOfAcceptors, Port, Handlers).\r\n```\r\n\r\nThat's about it - aberth will listen to requests on Port number, with set number of acceptors. Scaling aberth is done via [barrel](https://github.com/benoitc/barrel), so all barrel options apply to aberth as well.\r\n\r\nAberth is an OTP app so you can easily make it a part of your own OTP app.\r\n\r\n### Test the server (from python)\r\n\r\n```\r\nimport bertrpc\r\nservice = bertrpc.Service('localhost', 10001)\r\nresponse = service.request('call').some_adder.add(203,302)\r\nassert response == 505\r\n```\r\n\r\n### Test the server (from Ruby)\r\n\r\n```\r\nrequire 'bertrpc'\r\nsvc = BERTRPC::Service.new('localhost', 10001)\r\nr = svc.call.some_adder.add(1234, 4321)\r\nputs r\r\n```\r\n\r\nThis code will print 5555.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}